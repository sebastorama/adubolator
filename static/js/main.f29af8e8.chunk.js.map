{"version":3,"sources":["models/index.ts","components/FertilizerComponent.tsx","components/SummaryComponent.tsx","components/StrategyComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["newFertilizer","id","Date","getTime","n","p","k","s","kgPerHa","pricePerTon","newStrategy","fertilizers","calculateSummary","strategy","NaNtoZero","item","isNaN","summary","pricePerHa","forEach","fertilizer","FertilizerFieldComponent","fieldName","fieldLabelText","data","onDataChange","useState","insideData","setInsideData","useEffect","className","htmlFor","toUpperCase","type","name","value","onChange","e","parseInt","target","FertilizerComponent","onChangeFertilizer","onRemoveFertilizer","setFertilizer","onClick","SummaryComponent","displayType","thousandSeparator","decimalSeparator","decimalScale","fixedDecimalScale","prefix","StrategyComponent","onRemoveStrategy","onChangeStrategy","setStrategy","onChangeFertilizerHandler","updated","map","curr","length","key","removed","filter","onRemoveFertilizerHandler","push","App","strategies","setStrategies","onChangeStrategyHandler","change","newStrategies","remove","onRemoveStrategyHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f29af8e8.chunk.js","sourcesContent":["// <!-- Fertilizer -->\nexport interface Fertilizer {\n  id: number;\n  n: number;\n  p: number;\n  k: number;\n  s: number;\n  kgPerHa: number;\n  pricePerTon: number;\n}\n\nexport function newFertilizer(): Fertilizer {\n  const fertilizer = {\n    id: new Date().getTime(),\n    n: 0,\n    p: 0,\n    k: 0,\n    s: 0,\n    kgPerHa: 0,\n    pricePerTon: 0,\n  };\n  return fertilizer;\n}\n\nexport const MAP: Fertilizer = {\n  id: new Date().getTime(),\n  n: 11,\n  p: 52,\n  k: 0,\n  s: 0,\n  kgPerHa: 0,\n  pricePerTon: 0,\n};\n\nexport const KCl: Fertilizer = {\n  id: new Date().getTime(),\n  n: 0,\n  p: 0,\n  k: 60,\n  s: 0,\n  kgPerHa: 0,\n  pricePerTon: 0,\n};\n\n// <!-- Strategy -->\nexport interface Strategy {\n  id: number;\n  fertilizers: Fertilizer[];\n}\n\nexport function newStrategy(): Strategy {\n  const strategy: Strategy = {\n    id: new Date().getTime(),\n    fertilizers: [newFertilizer()],\n  };\n\n  return strategy;\n}\n\n// <!-- Summary -->\nexport interface Summary {\n  n: number;\n  p: number;\n  k: number;\n  s: number;\n  pricePerHa: number;\n}\n\nexport function calculateSummary(strategy: Strategy): Summary {\n  const NaNtoZero = (item: number): number => {\n    return isNaN(item) ? 0 : item;\n  };\n\n  const summary: Summary = {\n    n: 0,\n    p: 0,\n    k: 0,\n    s: 0,\n    pricePerHa: 0,\n  };\n\n  strategy.fertilizers.forEach((fertilizer) => {\n    summary.n += NaNtoZero(fertilizer.n * fertilizer.kgPerHa) / 100;\n    summary.p += NaNtoZero(fertilizer.p * fertilizer.kgPerHa) / 100;\n    summary.k += NaNtoZero(fertilizer.k * fertilizer.kgPerHa) / 100;\n    summary.s += NaNtoZero(fertilizer.s * fertilizer.kgPerHa) / 100;\n    summary.pricePerHa +=\n      NaNtoZero(fertilizer.pricePerTon * fertilizer.kgPerHa) / 1000;\n  });\n\n  return summary;\n}\n","import React, { Fragment, useState, useEffect } from \"react\";\n\nimport { Fertilizer } from \"../models\";\n\ntype FertilizerFieldComponentProps = {\n  fieldName: string;\n  fieldLabelText?: string;\n  data: number;\n  onDataChange(data: number): void;\n};\nconst FertilizerFieldComponent = ({\n  fieldName,\n  fieldLabelText,\n  data,\n  onDataChange,\n}: FertilizerFieldComponentProps) => {\n  const [insideData, setInsideData] = useState(data);\n\n  useEffect(() => {\n    onDataChange(insideData);\n  }, [insideData]);\n\n  return (\n    <div className=\"field fertilizer-field\">\n      <label htmlFor={fieldName} className=\"label is-small\">\n        {fieldLabelText ? fieldLabelText : fieldName.toUpperCase()}:\n      </label>\n      <div className=\"control\">\n        <input\n          type=\"number\"\n          className=\"input is-small\"\n          name={fieldName}\n          value={insideData}\n          onChange={(e) => {\n            setInsideData(parseInt(e.target.value, 10));\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\ntype FertilizerComponentProps = {\n  data: Fertilizer;\n  onChangeFertilizer(fertilizer: Fertilizer): void;\n  onRemoveFertilizer(): void;\n};\nfunction FertilizerComponent({\n  data,\n  onChangeFertilizer,\n  onRemoveFertilizer,\n}: FertilizerComponentProps) {\n  const [fertilizer, setFertilizer] = useState<Fertilizer>(data);\n\n  useEffect(() => {\n    onChangeFertilizer(fertilizer);\n  }, [fertilizer]);\n\n  return (\n    <Fragment>\n      <form className=\"fertilizer-form\">\n        <FertilizerFieldComponent\n          fieldName=\"n\"\n          data={fertilizer.n}\n          onDataChange={(value) => setFertilizer({ ...fertilizer, n: value })}\n        />\n        <FertilizerFieldComponent\n          fieldName=\"p\"\n          data={fertilizer.p}\n          onDataChange={(value) => setFertilizer({ ...fertilizer, p: value })}\n        />\n        <FertilizerFieldComponent\n          fieldName=\"k\"\n          data={fertilizer.k}\n          onDataChange={(value) => setFertilizer({ ...fertilizer, k: value })}\n        />\n        <FertilizerFieldComponent\n          fieldName=\"s\"\n          data={fertilizer.s}\n          onDataChange={(value) => setFertilizer({ ...fertilizer, s: value })}\n        />\n        <FertilizerFieldComponent\n          fieldName=\"kgPerHa\"\n          fieldLabelText=\"kg/ha\"\n          data={fertilizer.s}\n          onDataChange={(value) =>\n            setFertilizer({ ...fertilizer, kgPerHa: value })\n          }\n        />\n        <FertilizerFieldComponent\n          fieldName=\"pricePerTon\"\n          fieldLabelText=\"$/ton\"\n          data={fertilizer.s}\n          onDataChange={(value) =>\n            setFertilizer({ ...fertilizer, pricePerTon: value })\n          }\n        />\n      </form>\n      <button className=\"delete\" onClick={onRemoveFertilizer}>\n        Remover Fertilizante\n      </button>\n    </Fragment>\n  );\n}\n\nexport default FertilizerComponent;\n","import React, { Fragment } from \"react\";\nimport NumberFormat from \"react-number-format\";\nimport { Summary } from \"../models\";\n\ntype SummaryComponentProps = {\n  summary: Summary;\n};\nconst SummaryComponent = ({ summary }: SummaryComponentProps) => {\n  return (\n    <Fragment>\n      <p>\n        <var>N:</var>\n        {summary.n}\n        <var>P:</var>\n        {summary.p}\n        <var>K:</var>\n        {summary.k}\n        <var>S:</var>\n        {summary.s}\n        <var>custo/ha:</var>\n        <NumberFormat\n          value={summary.pricePerHa}\n          displayType=\"text\"\n          thousandSeparator=\".\"\n          decimalSeparator=\",\"\n          decimalScale={2}\n          fixedDecimalScale={true}\n          prefix=\"$\"\n        />\n      </p>\n    </Fragment>\n  );\n};\n\nexport default SummaryComponent;\n","import React, { Fragment, useState, useEffect } from \"react\";\n\nimport FertilizerComponent from \"./FertilizerComponent\";\nimport SummaryComponent from \"./SummaryComponent\";\nimport {\n  Strategy,\n  Fertilizer,\n  newFertilizer,\n  calculateSummary,\n} from \"../models\";\n\ntype StrategyComponentProps = {\n  data: Strategy;\n  onRemoveStrategy(): void;\n  onChangeStrategy(strategy: Strategy): void;\n};\n\nconst StrategyComponent = ({\n  data,\n  onRemoveStrategy,\n  onChangeStrategy,\n}: StrategyComponentProps) => {\n  const [strategy, setStrategy] = useState<Strategy>(data);\n\n  useEffect(() => {\n    strategy.fertilizers.length > 0\n      ? onChangeStrategy(strategy)\n      : onRemoveStrategy();\n  }, [strategy]);\n\n  function onAddFertilizerHandler() {\n    const newStrategy = { ...strategy };\n    newStrategy.fertilizers.push(newFertilizer());\n    setStrategy({ ...newStrategy });\n  }\n\n  function onChangeFertilizerHandler(updated: Fertilizer) {\n    const newStrategy = { ...strategy };\n    newStrategy.fertilizers = strategy.fertilizers.map((curr) => {\n      return curr.id === updated.id ? updated : curr;\n    });\n    setStrategy({ ...newStrategy });\n  }\n\n  function onRemoveFertilizerHandler(removed: Fertilizer) {\n    const newStrategy = { ...strategy };\n    newStrategy.fertilizers = strategy.fertilizers.filter((curr) => {\n      return curr.id !== removed.id;\n    });\n    setStrategy({ ...newStrategy });\n  }\n\n  return (\n    <div className=\"strategy\">\n      {strategy.fertilizers.map((fertilizer: Fertilizer) => (\n        <Fragment key={fertilizer.id}>\n          <FertilizerComponent\n            data={fertilizer}\n            onChangeFertilizer={onChangeFertilizerHandler}\n            onRemoveFertilizer={() => onRemoveFertilizerHandler(fertilizer)}\n          />\n        </Fragment>\n      ))}\n      <div className=\"summary-result\">\n        <SummaryComponent summary={calculateSummary(strategy)} />\n      </div>\n      <div className=\"strategy-actions\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"button is-small\"\n            onClick={onAddFertilizerHandler}\n          >\n            Adicionar Fertilizante\n          </button>\n          <button\n            type=\"button\"\n            className=\"button is-danger is-small\"\n            onClick={onRemoveStrategy}\n          >\n            Remover Manejo\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StrategyComponent;\n","import React, { Fragment, useState } from \"react\";\nimport \"./App.css\";\nimport \"bulma\";\n\nimport { Strategy, Fertilizer, newStrategy } from \"./models\";\nimport StrategyComponent from \"./components/StrategyComponent\";\n\nconst App = () => {\n  const [strategies, setStrategies] = useState<Strategy[]>([newStrategy()]);\n\n  const onAddStrategyHandler = () => {\n    const strategy = newStrategy();\n    setStrategies([...strategies, strategy]);\n  };\n\n  const onRemoveStrategyHandler = (remove: Strategy) => {\n    const newStrategies = strategies.filter((curr) => {\n      return curr.id !== remove.id;\n    });\n    setStrategies([...newStrategies]);\n  };\n\n  const onChangeStrategyHandler = (change: Strategy) => {\n    const newStrategies = strategies.map((curr) => {\n      return curr.id === change.id ? change : curr;\n    });\n    setStrategies([...newStrategies]);\n  };\n\n  return (\n    <Fragment>\n      <header>\n        <h1>Adubolator</h1>\n      </header>\n      <main>\n        {strategies.map((strategy) => {\n          return (\n            <Fragment>\n              <StrategyComponent\n                key={strategy.id}\n                data={strategy}\n                onRemoveStrategy={() => onRemoveStrategyHandler(strategy)}\n                onChangeStrategy={onChangeStrategyHandler}\n              />\n            </Fragment>\n          );\n        })}\n\n        <button\n          type=\"button\"\n          className=\"button is-primary add-strategy\"\n          onClick={onAddStrategyHandler}\n        >\n          Acrescentar Manejo\n        </button>\n      </main>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}